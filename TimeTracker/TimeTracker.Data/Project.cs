//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TimeTracker.Data
{
    public partial class Project : BaseEntity
    {
        #region Primitive Properties
    
        public virtual string Number
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<User> User
        {
            get
            {
                if (_user == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupUser;
                    _user = newCollection;
                }
                return _user;
            }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUser;
                    }
                    _user = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUser;
                    }
                }
            }
        }
        private ICollection<User> _user;
    
        public virtual ICollection<Booking> Bookings
        {
            get
            {
                if (_bookings == null)
                {
                    var newCollection = new FixupCollection<Booking>();
                    newCollection.CollectionChanged += FixupBookings;
                    _bookings = newCollection;
                }
                return _bookings;
            }
            set
            {
                if (!ReferenceEquals(_bookings, value))
                {
                    var previousValue = _bookings as FixupCollection<Booking>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBookings;
                    }
                    _bookings = value;
                    var newValue = value as FixupCollection<Booking>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBookings;
                    }
                }
            }
        }
        private ICollection<Booking> _bookings;

        #endregion
        #region Association Fixup
    
        private void FixupUser(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.Projects.Contains(this))
                    {
                        item.Projects.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.Projects.Contains(this))
                    {
                        item.Projects.Remove(this);
                    }
                }
            }
        }
    
        private void FixupBookings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Booking item in e.NewItems)
                {
                    item.Project = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Booking item in e.OldItems)
                {
                    if (ReferenceEquals(item.Project, this))
                    {
                        item.Project = null;
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TimeTracker.Data
{
    public partial class User : BaseEntity
    {
        #region Navigation Properties
    
        public virtual ICollection<Booking> Bookings
        {
            get
            {
                if (_bookings == null)
                {
                    var newCollection = new FixupCollection<Booking>();
                    newCollection.CollectionChanged += FixupBookings;
                    _bookings = newCollection;
                }
                return _bookings;
            }
            set
            {
                if (!ReferenceEquals(_bookings, value))
                {
                    var previousValue = _bookings as FixupCollection<Booking>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBookings;
                    }
                    _bookings = value;
                    var newValue = value as FixupCollection<Booking>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBookings;
                    }
                }
            }
        }
        private ICollection<Booking> _bookings;
    
        public virtual ICollection<Project> Projects
        {
            get
            {
                if (_projects == null)
                {
                    var newCollection = new FixupCollection<Project>();
                    newCollection.CollectionChanged += FixupProjects;
                    _projects = newCollection;
                }
                return _projects;
            }
            set
            {
                if (!ReferenceEquals(_projects, value))
                {
                    var previousValue = _projects as FixupCollection<Project>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProjects;
                    }
                    _projects = value;
                    var newValue = value as FixupCollection<Project>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProjects;
                    }
                }
            }
        }
        private ICollection<Project> _projects;

        #endregion
        #region Association Fixup
    
        private void FixupBookings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Booking item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Booking item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupProjects(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Project item in e.NewItems)
                {
                    if (!item.User.Contains(this))
                    {
                        item.User.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Project item in e.OldItems)
                {
                    if (item.User.Contains(this))
                    {
                        item.User.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
